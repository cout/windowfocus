#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'

DIRECTION = ARGV[0]

$verbose = false

parser = OptionParser.new do |opts|
  opts.banner = "Usage: #$0 [options]"

  opts.on('-v', '--[no-]verbose', 'Run verbosely') { |v| $verbose = true }
end

parser.parse!

def log(msg)
  puts msg if $verbose
end

def shell_to_hash(s)
  h = { }

  s.each_line do |line|
    line.chomp!
    key, value = line.split('=', 2)
    h[key] = value
  end

  return h
end

def shell_to_hashes(s)
  all = [ ]
  h = { }

  s.each_line do |line|
    line.chomp!
    key, value = line.split('=', 2)
    if h.include?(key) then
      all << h
      h = { }
    end
    h[key] = value
  end

  return all
end

def direction(src, dest)
  src_midx = (src['X'].to_i + src['WIDTH'].to_i) / 2
  src_midy = (src['Y'].to_i + src['HEIGHT'].to_i) / 2
  dest_midx = (dest['X'].to_i + dest['WIDTH'].to_i) / 2
  dest_midy = (dest['Y'].to_i + dest['HEIGHT'].to_i) / 2

  diff_x = dest_midx - src_midx
  diff_y = dest_midy - src_midy

  angle_rads = Math.atan2(diff_y, diff_x)
  angle = angle_rads * 180 / Math::PI

  log "(#{src_midx},#{src_midy}) to (#{dest_midx},#{dest_midy}): diff=(#{diff_x},#{diff_y}), angle=#{angle_rads} #{angle}"

  if angle > 45 and angle <= 135 then
    return 'down'
  elsif angle < -45 and angle >= -135 then
    return 'up'
  elsif angle <= 45 and angle >= -45 then
    return 'right'
  else
    return 'left'
  end
end

# Get information for the active window (5ms)
active = shell_to_hash(`xdotool getwindowfocus getwindowgeometry --shell`)

# Get information about the current desktop (2ms)
desktop = `xdotool get_desktop`.chomp

# Get a list of visible windows (20ms)
cmd = "xdotool search --onlyvisible --maxdepth 2 --screen #{active['SCREEN']} --desktop #{desktop} --name '.*'"
log cmd
s_windows = `#{cmd}`
windows = s_windows.split
log "Windows: #{windows.inspect}"

# Find non-hidden windows (20ms)
windows = windows.reject do |window_id|
  # If the window is hidden (minimized/iconified), then ignore it
  xwininfo = `xwininfo -all -id #{window_id}`
  log "#{window_id}: hidden=#{xwininfo =~ /hidden/i}"
  xwininfo =~ /hidden/i
end

# Get window geometries (17ms)
# geometries = windows.map do |window_id|
#   shell_to_hash(`xdotool getwindowgeometry --shell #{window_id}`)
# end
geometry_commands = windows.map { |window_id| "getwindowgeometry --shell #{window_id}" }
geometries = shell_to_hashes(`xdotool #{geometry_commands.join(' ')}`)

smallest = Float::INFINITY
target_id = nil

# Select a new target window (0ms)
geometries.each do |window|
  # Determine how close the window is in the specified direction
  case DIRECTION
  when 'left'  then diff = active['X'].to_i - window['X'].to_i
  when 'right' then diff = window['X'].to_i - active['X'].to_i
  when 'up'    then diff = active['Y'].to_i - window['Y'].to_i
  when 'down'  then diff = window['Y'].to_i - active['Y'].to_i
  end

  dir = direction(active, window)

  # Is this the next closest window in the specified direction?  If so
  # then keep it.
  if DIRECTION == dir and diff > 0 and diff < smallest then
    smallest = diff
    target_id = window['WINDOW']
  end

  log "#{window['WINDOW']} #{active.inspect} #{window.inspect} #{smallest} #{target_id} #{dir}"
end

# Focus the target window (0ms)
if target_id then
  log "Changing focus to window #{target_id}"
  `xdotool windowfocus #{target_id}`
end
